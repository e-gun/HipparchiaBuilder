cloc --not-match-f='^j' HipparchiaBuilder/
      66 text files.
      66 unique files.
      10 files ignored.

github.com/AlDanial/cloc v 1.84  T=0.21 s (286.1 files/s, 80571.9 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                          49           3365           3986           8722
SQL                              2             69             41            254
INI                              2             43              0            214
XML                              6              0              0            110
Markdown                         1             30              0             65
-------------------------------------------------------------------------------
SUM:                            60           3507           4027           9365
-------------------------------------------------------------------------------


HipparchiaBuilder/ $ grep "^class" */*.py && grep "^def " */*.py && grep "^def " */*/*.py
builder/builderclasses.py:class Author(object):
builder/builderclasses.py:class dbAuthor(object):
builder/builderclasses.py:class dbOpus(object):
builder/builderclasses.py:class dbWorkLine(object):
builder/builderclasses.py:class dbWordCountObject(object):
builder/builderclasses.py:class dbLemmaObject(object):
builder/builderclasses.py:class Opus(object):
builder/builderclasses.py:class MPCounter(object):
builder/redisdbfunctions.py:class NullRedis(object):
builder/redisdbfunctions.py:class PooledRedisBorg(object):
builder/configureatlaunch.py:def getcommandlineargs():
builder/configureatlaunch.py:def tobuildaccordingtoconfigfile():
builder/corpusbuilder.py:def buildcorpusdbs(corpusname, corpusvars):
builder/corpusbuilder.py:def remaptables(corpusname, corpusvars):
builder/corpusbuilder.py:def buildcorpusmetadata(corpusname, corpusvars):
builder/corpusbuilder.py:def managedworker(managedwork, dbconnection):
builder/corpusbuilder.py:def checkextant(authorlist, datapath):
builder/corpusbuilder.py:def addoneauthor(authordict, language, uidprefix, datapath, dataprefix, dbconnection, debugoutput=False, debugnewlines=True, skipdbload=False):
builder/corpusbuilder.py:def thecollectedworksof(authorobject: dbAuthor, language: str, datapath: str, dbconnection, debugoutput=False, debugnewlines=True, skipdbload=False):
builder/corpusbuilder.py:def buildauthorobject(authortabnumber, language, datapath, uidprefix, dataprefix):
builder/corpusbuilder.py:def initialworkparsing(authorobject, language, datapath, debugoutput=False, debugnewlines=True) -> str:
builder/corpusbuilder.py:def secondaryworkparsing(authorobject, thetext: str, debugoutput=False, debugnewlines=True) -> List[str]:
builder/corpusbuilder.py:def databaseloading(dbreadyversion: list, authorobject: dbAuthor, dbconnection):
builder/redisdbfunctions.py:def establishredisconnection() -> redis.client.Redis:
builder/redisdbfunctions.py:def buildrediswordlists(wordlistdictionary: dict):
builder/redisdbfunctions.py:def deleterediswordlists(keylist):
builder/redisdbfunctions.py:def buildrediskeylists(uidpiles: list, workers: int):
builder/redisdbfunctions.py:def deleterediskeylists(workers: int):
builder/redisdbfunctions.py:def loadredisresults(searchid):
builder/workers.py:def setworkercount():
builder/dbinteraction/connection.py:def setconnection(autocommit=False, simple=False):
builder/dbinteraction/connection.py:def icanpickleconnections():
builder/dbinteraction/dbdataintoobjects.py:def dbfetchauthorobject(uid, dbcursor):
builder/dbinteraction/dbdataintoobjects.py:def generatecomprehensivesetoflineobjects():
builder/dbinteraction/dbdataintoobjects.py:def makeminimallineobject(index, wkuniversalid, accented_line):
builder/dbinteraction/dbdataintoobjects.py:def dbauthorandworkloader(authoruid, cursor):
builder/dbinteraction/dbdataintoobjects.py:def loadallworksintoallauthors(authorsdict, worksdict):
builder/dbinteraction/dbdataintoobjects.py:def grabminimallineobjectsfromlist(db, linelist):
builder/dbinteraction/dbdataintoobjects.py:def graballlinesasobjects(db, linerangetuple, cursor):
builder/dbinteraction/dbdataintoobjects.py:def graballcountsasobjects(db, cursor, extrasql=''):
builder/dbinteraction/dbdataintoobjects.py:def grablemmataasobjects(db, cursor):
builder/dbinteraction/dbdataintoobjects.py:def dblineintolineobject(dbline):
builder/dbinteraction/dbdataintoobjects.py:def makeablankline(work, fakelinenumber):
builder/dbinteraction/dbdataintoobjects.py:def loadallauthorsasobjects():
builder/dbinteraction/dbdataintoobjects.py:def loadallworksasobjects():
builder/dbinteraction/dbhelperfunctions.py:def resultiterator(cursor, chunksize=5000):
builder/dbinteraction/dbhelperfunctions.py:def authortablemaker(authordbname, dbconnection):
builder/dbinteraction/dbhelperfunctions.py:def tablenamer(authorobject, indexedat):
builder/dbinteraction/dbhelperfunctions.py:def dbauthoradder(authorobject, dbconnection):
builder/dbinteraction/dbhelperfunctions.py:def workmaker(authorobject, indexedat, cursor):
builder/dbinteraction/dbhelperfunctions.py:def resetauthorsandworksdbs(tmpprefix, prefix):
builder/dbinteraction/dbhelperfunctions.py:def updatedbfromtemptable(table, sharedcolumn, targetcolumnlist, insertiondict):
builder/dbinteraction/dbloading.py:def insertworksintoauthortable(authorobject, dbreadyversion, dbconnection):
builder/dbinteraction/dbloading.py:def generatequeryvaluetuples(dbreadyversion, authorobject):
builder/dbinteraction/dbloading.py:def generatecopystream(queryvaluetuples, separator='\t'):
builder/dbinteraction/dbprepsubstitutions.py:def dbprepper(dbunreadyversion: list) -> deque:
builder/dbinteraction/dbprepsubstitutions.py:def cleanblanks(dbunreadyversion: list) -> list:
builder/dbinteraction/dbprepsubstitutions.py:def dbpdeincrement(dbunreadyversion: list) -> deque:
builder/dbinteraction/dbprepsubstitutions.py:def dbstrippedliner(dbunreadyversion: deque) -> deque:
builder/dbinteraction/dbprepsubstitutions.py:def dbswapoutbadcharsfromcitations(dbunreadyversion: deque) -> deque:
builder/dbinteraction/dbprepsubstitutions.py:def dbfindhypens(dbunreadyversion: deque) -> deque:
builder/dbinteraction/dbprepsubstitutions.py:def dbfindannotations(dbunreadyversion):
builder/dbinteraction/dbprepsubstitutions.py:def hmutonbsp(dbunreadyversion: list) -> deque:
builder/dbinteraction/dbprepsubstitutions.py:def quarterspacer(matchgroup):
builder/dbinteraction/dbprepsubstitutions.py:def noleadingortrailingwhitespace(dbunreadyversion: list) -> deque:
builder/dbinteraction/dbprepsubstitutions.py:def consolidatecontiguouslines(previousline: list, thisline: list, hypenatedword: str, transtable):
builder/dbinteraction/versioning.py:def versiontablemaker(dbconnection):
builder/dbinteraction/versioning.py:def timestampthebuild(corpusname: str, dbconnection=None):
builder/dbinteraction/versioning.py:def readgitdata() -> str:
builder/file_io/filereaders.py:def findauthors(pathtoauthtab):
builder/file_io/filereaders.py:def highunicodefileload(filepath):
builder/file_io/filereaders.py:def streamout(txt, outfile):
builder/file_io/filereaders.py:def linesout(txt, outfile):
builder/lexica/buildlexica.py:def formatgklexicon():
builder/lexica/buildlexica.py:def formatlatlexicon():
builder/lexica/buildlexica.py:def grammarloader(language: str):
builder/lexica/buildlexica.py:def analysisloader(language: str):
builder/lexica/buildlexica.py:def resettable(tablename: str, tablestructurelist: list, indexcolumn: str):
builder/lexica/buildlexica.py:def getlexicaltablestructuredict(tablename: str) -> dict:
builder/lexica/mpgrammarworkers.py:def mplemmatainsert(grammardb, entries, islatin, dbconnection):
builder/lexica/mpgrammarworkers.py:def mpanalysisinsert(grammardb, entries, islatin, dbconnection):
builder/lexica/mpgreekinserters.py:def mpgreekdictionaryinsert(dictdb: str, entries: list, dbconnection):
builder/lexica/mpgreekinserters.py:def oldxmlmpgreekdictionaryinsert(dictdb: str, entries: list, dbconnection):
builder/lexica/mplatininsterters.py:def newmplatindictionaryinsert(dictdb: str, entries: list, dbconnection):
builder/lexica/mplatininsterters.py:def oldmplatindictionaryinsert(dictdb: str, entries: list, dbconnection):
builder/parsers/betacodeandunicodeinterconversion.py:def replacegreekbetacode(texttoclean):
builder/parsers/betacodeandunicodeinterconversion.py:def parseromaninsidegreek(texttoclean):
builder/parsers/betacodeandunicodeinterconversion.py:def parsegreekinsidelatin(texttoclean):
builder/parsers/betacodeandunicodeinterconversion.py:def restoreromanwithingreek(texttoclean):
builder/parsers/betacodeandunicodeinterconversion.py:def cleanaccentsandvj(texttostrip, transtable=None):
builder/parsers/betacodeandunicodeinterconversion.py:def buildhipparchiatranstable():
builder/parsers/betacodeandunicodeinterconversion.py:def purgehybridgreekandlatinwords(texttoclean):
builder/parsers/betacodeandunicodeinterconversion.py:def unmixer(matchgroup):
builder/parsers/betacodeandunicodeinterconversion.py:def unbreather(matchgroup):
builder/parsers/betacodeandunicodeinterconversion.py:def unpunctuated(matchgroup):
builder/parsers/betacodeandunicodeinterconversion.py:def multipledots(matchgroup):
builder/parsers/betacodeandunicodeinterconversion.py:def ldcfindandclean(texttoclean):
builder/parsers/betacodeandunicodeinterconversion.py:def latinsubstitutes(matchgroup):
builder/parsers/betacodeandunicodeinterconversion.py:def ldc(matchgroup):
builder/parsers/betacodeescapedcharacters.py:def replaceaddnlchars(texttoclean: str) -> str:
builder/parsers/betacodeescapedcharacters.py:def singletonsubstitutes(texttoclean: str) -> str:
builder/parsers/betacodeescapedcharacters.py:def poundsubstitutes(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def percentsubstitutes(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def leftbracketsubstitutions(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def rightbracketsubstitutions(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def atsignsubstitutions(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def ltcurlybracketsubstitutes(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def rtcurlybracketsubstitutes(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def ltanglebracketsubstitutes(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def rtanglebracketsubstitutes(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def quotesubstitutesa(match: regexmatch) -> str:
builder/parsers/betacodeescapedcharacters.py:def quotesubstitutesb(match: regexmatch) -> str:
builder/parsers/betacodefontshifts.py:def replacegreekmarkup(texttoclean):
builder/parsers/betacodefontshifts.py:def latinfontlinemarkupprober(texttoclean):
builder/parsers/betacodefontshifts.py:def latinfontlinemarkupparser(match):
builder/parsers/betacodefontshifts.py:def latinauthorlinemarkupprober(texttoclean, grabber=None):
builder/parsers/betacodefontshifts.py:def latinauthordollarshiftparser(match):
builder/parsers/betacodefontshifts.py:def latinauthorandshiftparser(match):
builder/parsers/betacodefontshifts.py:def dollarssubstitutes(val, core, extra=''):
builder/parsers/betacodefontshifts.py:def andsubstitutes(groupone, grouptwo, groupthree):
builder/parsers/betacodefontshifts.py:def removeshiftsymmetry(groupone: str, grouptwo: str, groupthree: str) -> str:
builder/parsers/betacodefontshifts.py:def hmuintospans(texttoclean: str, language: str, force=False) -> str:
builder/parsers/betacodefontshifts.py:def latinhmufontshiftsintospans(texttoclean):
builder/parsers/betacodefontshifts.py:def greekhmufontshiftsintospans(texttoclean):
builder/parsers/betacodefontshifts.py:def matchskipper(groupone, grouptwo, language):
builder/parsers/betacodeletterscapitals.py:def capitalletters(betacode: str) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalsigmassubsitutes(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalsmoothgraveadscript(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalroughgraveadscript(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalsmoothacuteadscript(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalroughacuteadscript(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalsmoothcircumflexadscript(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalroughcircumflexadscript(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalsmoothgrave(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalroughgrave(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalsmoothacute(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalroughacute(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalsmoothcircumflex(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalroughcircumflex(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalsmooth(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalrough(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalgrave(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalacute(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitalcircumflex(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitaladscript(match: regexmatch) -> str:
builder/parsers/betacodeletterscapitals.py:def capitals(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseletters(betacode: str) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesigmassubsitutes(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesmoothgravesubscript(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseroughgravesubscript(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesmoothacutesubscript(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseroughacutesubscript(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesmoothcircumflexsubscript(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseroughcircumflexsubscript(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesmoothgrave(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseroughgrave(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesmoothacute(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseroughacute(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesmoothcircumflex(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseroughcircumflex(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasegravesub(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseacutedsub(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesircumflexsub(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesmoothsub(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseroughsub(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasegravediaresis(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseacutediaresis(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesircumflexdiaresis(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesmooth(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaserough(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasegrave(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercaseacute(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercascircumflex(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasediaresis(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercasesubscript(match: regexmatch) -> str:
builder/parsers/betacodeletterslowercase.py:def lowercases(match: regexmatch) -> str:
builder/parsers/citationbuilder.py:def citationbuilder(hexsequence: regexmatch) -> str:
builder/parsers/citationbuilder.py:def levelsixparsing(action, actionmapper, fullcitation, hexsequence) -> tuple:
builder/parsers/citationbuilder.py:def nybbler(singlehexval: str) -> tuple:
builder/parsers/citationbuilder.py:def nyb08(hexsequence: list) -> tuple:
builder/parsers/citationbuilder.py:def nyb09(hexsequence: list) -> tuple:
builder/parsers/citationbuilder.py:def nyb10(hexsequence: list) -> tuple:
builder/parsers/citationbuilder.py:def nyb11(hexsequence: list) -> tuple:
builder/parsers/citationbuilder.py:def nyb12(hexsequence: list) -> tuple:
builder/parsers/citationbuilder.py:def nyb13(hexsequence: list) -> tuple:
builder/parsers/citationbuilder.py:def nyb14(hexsequence: list) -> tuple:
builder/parsers/citationbuilder.py:def nyb15(hexsequence: list) -> tuple:
builder/parsers/copticsubstitutions.py:def replacecoptic(texttoclean: str) -> str:
builder/parsers/copticsubstitutions.py:def copticprobe(match: regexmatch) -> str:
builder/parsers/copticsubstitutions.py:def copticuppercases(toreplace: str) -> str:
builder/parsers/copticsubstitutions.py:def copticlowercases(toreplace: str) -> str:
builder/parsers/greekcanonfunctions.py:def languagesubstitutes(opentag: str, foundtext: str, closetag: str) -> str:
builder/parsers/greekcanonfunctions.py:def loadgkcanon(canonfile: str):
builder/parsers/greekcanonfunctions.py:def gkcanoncleaner(txt: str) -> List[str]:
builder/parsers/greekcanonfunctions.py:def temptableauthorline(newauthorinfo: str, allauthors: dict) -> List[str]:
builder/parsers/greekcanonfunctions.py:def temptableworkline(newworkinfo, allworks) -> List[str]:
builder/parsers/greekcanonfunctions.py:def peekatcanon(workdbname: str) -> List[str]:
builder/parsers/hebrewsubstitutions.py:def replacehebrew(texttoclean):
builder/parsers/htmltounicode.py:def htmltounicode(htmltext: str, brevefinder=None, macrfinder=None) -> str:
builder/parsers/idtfiles.py:def loadauthor(idtfiledatastream, language, uidprefix, dataprefix):
builder/parsers/idtfiles.py:def getasciistring(filearray, offset):
builder/parsers/idtfiles.py:def getpascalstr(filearray, offset):
builder/parsers/idtfiles.py:def idthexparser(filearray, offset, code):
builder/parsers/idtfiles.py:def findlabelsforlevels(filearray, offset):
builder/parsers/latinsubstitutions.py:def latindiacriticals(texttoclean: str) -> str:
builder/parsers/latinsubstitutions.py:def latinsubstitutes(matchgroup) -> str:
builder/parsers/lexica.py:def greekwithoutvowellengths(betagreek: str) -> str:
builder/parsers/lexica.py:def greekwithvowellengths(ttc):
builder/parsers/lexica.py:def latinvowellengths(texttoclean: str) -> str:
builder/parsers/lexica.py:def betaconvertandsave(convertme: regexmatch) -> str:
builder/parsers/lexica.py:def lsjgreekswapper(match: regexmatch) -> str:
builder/parsers/lexica.py:def translationsummary(fullentry: str, translationlabel: str) -> str:
builder/parsers/parse_binfiles.py:def resetbininfo(relativepath, dbconnection):
builder/parsers/parse_binfiles.py:def npop(numbertopop, listtopop):
builder/parsers/parse_binfiles.py:def listoflabels(rbl):
builder/parsers/parse_binfiles.py:def intostring(listofchars):
builder/parsers/parse_binfiles.py:def grabaunum(bytebundle):
builder/parsers/parse_binfiles.py:def findlabelbytestart(headerset):
builder/parsers/parse_binfiles.py:def findbundledauthors(bytebundle):
builder/parsers/parse_binfiles.py:def findbundledworks(bytebundle):
builder/parsers/parse_binfiles.py:def cleanlabels(labellist):
builder/parsers/parse_binfiles.py:def buildlabellist(binfilepath):
builder/parsers/parse_binfiles.py:def convertbinfiledates(stringdate):
builder/parsers/parse_binfiles.py:def convertdatelist(datelist):
builder/parsers/parse_binfiles.py:def wipegreekauthorcolumn(column, dbconnection):
builder/parsers/parse_binfiles.py:def dbloadlist(labellist, column, dbconnection):
builder/parsers/parse_binfiles.py:def latinloadcanon(canonfile, cursor):
builder/parsers/parse_binfiles.py:def insertlatingenres(dbconnection):
builder/parsers/parse_binfiles.py:def citationreformatter(matchgroups):
builder/parsers/parse_binfiles.py:def streamout(txt, outfile):
builder/parsers/regexsubstitutions.py:def earlybirdsubstitutions(texttoclean):
builder/parsers/regexsubstitutions.py:def replacequotationmarks(texttoclean):
builder/parsers/regexsubstitutions.py:def lastsecondsubsitutions(texttoclean):
builder/parsers/regexsubstitutions.py:def makepunctuationnormalsized(match):
builder/parsers/regexsubstitutions.py:def makepunctuationsmall(val):
builder/parsers/regexsubstitutions.py:def bracketsimplifier(match):
builder/parsers/regexsubstitutions.py:def swapregexbrackets(val):
builder/parsers/regexsubstitutions.py:def debughostilesubstitutions(texttoclean):
builder/parsers/regexsubstitutions.py:def cleanuplingeringmesses(texttoclean):
builder/parsers/regexsubstitutions.py:def bracketspacer(matchgroup):
builder/parsers/regexsubstitutions.py:def fixhmuoragnizationlinebyline(txt: List[str]) -> List[str]:
builder/parsers/regexsubstitutions.py:def fixhmuirrationaloragnization(worlkine: str):
builder/parsers/regexsubstitutions.py:def totallemmatization(parsedtextfile: List[str]) -> List[str]:
builder/parsers/regexsubstitutions.py:def addcdlabels(texttoclean, authornumber):
builder/parsers/regexsubstitutions.py:def hexrunner(texttoclean):
builder/parsers/regexsubstitutions.py:def converthextoascii(hextoasciimatch):
builder/parsers/regexsubstitutions.py:def cleanworkname(betacodeworkname):
builder/parsers/regexsubstitutions.py:def colonshift(txt):
builder/parsers/regexsubstitutions.py:def insertnewlines(txt):
builder/parsers/regexsubstitutions.py:def tidyupterm(word: str, punct=None) -> str:
builder/parsers/swappers.py:def highunicodetohex(highunicode):
builder/parsers/swappers.py:def hutohxgrouper(matchgroup):
builder/parsers/swappers.py:def hextohighunicode(twocharhexstring):
builder/parsers/swappers.py:def bitswapchars(valuelist):
builder/parsers/swappers.py:def superscripterone(digitmatch):
builder/parsers/swappers.py:def superscripterzero(digitmatch):
builder/parsers/swappers.py:def forceregexsafevariants(text: str) -> str:
builder/parsers/swappers.py:def avoidregexsafevariants(text: str) -> str:
builder/parsers/swappers.py:def forcelunates(text: str) -> str:
builder/parsers/transliteration.py:def transliteratecolums(deprepdeque: deque):
builder/parsers/transliteration.py:def transliteratethedeque(deprepdeque: deque, workingcolumn=4) -> deque:
builder/parsers/transliteration.py:def runsswapsuite(texttoswap: str) -> str:
builder/parsers/transliteration.py:def hforrough(texttoswap: str) -> str:
builder/parsers/transliteration.py:def twoletterswaps(texttoswap: str) -> str:
builder/parsers/transliteration.py:def oneletterswaps(texttoswap: str) -> str:
builder/parsers/transliteration.py:def oneintotwosubs(texttoswap: str) -> str:
builder/parsers/transliteration.py:def stripaccents(texttostrip: str, transtable=None) -> str:
builder/parsers/transliteration.py:def buildhipparchiatranstable() -> dict:
builder/postbuild/postbuilddating.py:def convertdate(date, passvalue=0):
builder/postbuild/postbuilddating.py:def germandate(stringdate):
builder/postbuild/postbuilddating.py:def numberedcenturydate(stringdate, ordinalregexfinder):
builder/postbuild/postbuilddating.py:def aetatesdates(stringdate):
builder/postbuild/postbuilddating.py:def romannumeraldate(stringdate):
builder/postbuild/postbuilddating.py:def numericdate(stringdate):
builder/postbuild/postbuilddating.py:def datemapper(stringdate):
builder/postbuild/postbuildmetadata.py:def insertfirstsandlasts(workcategoryprefix):
builder/postbuild/postbuildmetadata.py:def boundaryfinder(uids):
builder/postbuild/postbuildmetadata.py:def insertboundaries(boundariestuplelist):
builder/postbuild/postbuildmetadata.py:def findwordcounts(dbconnection):
builder/postbuild/postbuildmetadata.py:def calculatewordcounts(uids):
builder/postbuild/postbuildmetadata.py:def insertcounts(countdict):
builder/postbuild/postbuildmetadata.py:def buildtrigramindices(workcategoryprefix):
builder/postbuild/postbuildmetadata.py:def mpindexbuilder(universalids, commitcount, dbconnection):
builder/postbuild/secondpassdbrewrite.py:def builddbremappers(oldprefix, newprefix):
builder/postbuild/secondpassdbrewrite.py:def compilenewauthors(aumapper, wkmapper):
builder/postbuild/secondpassdbrewrite.py:def compilenewworks(newauthors, wkmapper):
builder/postbuild/secondpassdbrewrite.py:def insertnewworkdata(newworktuples):
builder/postbuild/secondpassdbrewrite.py:def registernewworks(workinfodict: dict, thetable: str):
builder/postbuild/secondpassdbrewrite.py:def registernewdates(workinfodict: dict, thetable: str):
builder/postbuild/secondpassdbrewrite.py:def registernewnotes(workinfodict: dict):
builder/postbuild/secondpassdbrewrite.py:def findnewtitles(newworktuples):
builder/postbuild/secondpassdbrewrite.py:def buildnewworkmetata(workandtitletuplelist) -> dict:
builder/postbuild/secondpassdbrewrite.py:def parallelnewworkworker(workpile, newworktuples, dbconnection):
builder/postbuild/secondpassdbrewrite.py:def buildworkmetadatatuples(workpile, commitcount, metadatalist, dbconnection):
builder/postbuild/secondpassdbrewrite.py:def modifyauthorsdb(newentryname: str, worktitle: str, dbcursor):
builder/postbuild/secondpassdbrewrite.py:def insertnewworksintonewauthor(newwkuid, results, dbcursor):
builder/postbuild/secondpassdbrewrite.py:def generatemodifiedtuples(results: List[tuple], newwkuid: str):
builder/postbuild/secondpassdbrewrite.py:def assignlanguagetonewworks(dbprefix: str):
builder/postbuild/secondpassdbrewrite.py:def determineworklanguage(strippedlines: List[str]):
builder/postbuild/secondpassdbrewrite.py:def insertlanguagedata(languagetuplelist: List[tuple]):
builder/wordcounting/databasewordcounts.py:def monowordcounter(restriction=None, authordict=None, workdict=None):
builder/wordcounting/databasewordcounts.py:def monothreadedindexer(lineobjects, workername=''):
builder/wordcounting/databasewordcounts.py:def mpwordcounter(restriction=None, authordict=None, workdict=None):
builder/wordcounting/databasewordcounts.py:def mpbuildindexdictionary(pilenumber, workpile):
builder/wordcounting/databasewordcounts.py:def generatesearchidlist(restriction, authordict, workdict):
builder/wordcounting/databasewordcounts.py:def generatedbdictwithranges(idlist, workdict):
builder/wordcounting/databasewordcounts.py:def convertrangedicttolineset(dbswithranges):
builder/wordcounting/databasewordcounts.py:def generatewordcounttablesonfirstpass(wordcounttable, masterconcorcdance):
builder/wordcounting/databasewordcounts.py:def calculatetotals(masterconcorcdance):
builder/wordcounting/databasewordcounts.py:def generatemasterconcorcdancevaluetuples(masterconcorcdance, letter):
builder/wordcounting/databasewordcounts.py:def rediswordcounter(restriction=None, authordict=None, workdict=None):
builder/wordcounting/databasewordcounts.py:def redisbuildindexdict(workernumber: int):
builder/wordcounting/loadwordcoundsfromsql.py:def wordcountloader(pathtowordcounts: Path):
builder/wordcounting/wordcountdbfunctions.py:def createwordcounttable(tablename, extracolumns=False):
builder/wordcounting/wordcountdbfunctions.py:def deletetemporarydbs(temprefix):
builder/wordcounting/wordcountdbfunctions.py:def insertchronologicalmetadata(metadatadict, thetable):
builder/wordcounting/wordcountdbfunctions.py:def insertgenremetadata(metadatadict, genrename, thetable):
builder/wordcounting/wordcounthelperfunctions.py:def dictmerger(masterdict, targetdict, label):
builder/wordcounting/wordcounthelperfunctions.py:def acuteforgrave(matchgroup):
builder/wordcounting/wordcounthelperfunctions.py:def cleanwords(word, punct):
builder/wordcounting/wordcounthelperfunctions.py:def prettyprintcohortdata(label, cohortresultsdict):
builder/wordcounting/wordcounthelperfunctions.py:def rebasedcounter(decimalvalue, base):
builder/wordcounting/wordcounthelperfunctions.py:def unpackchainedranges(chainedranges):
builder/wordcounting/wordcounthelperfunctions.py:def concordancemerger(listofconcordancedicts):
builder/wordcounting/wordcounthelperfunctions.py:def grouper(iterable, n, fillvalue=None):
builder/wordcounting/wordcountsbyheadword.py:def headwordcounts():
builder/wordcounting/wordcountsbyheadword.py:def buildcountsfromlemmalist(lemmataobjectslist, wordcountdict):
builder/wordcounting/wordcountsbyheadword.py:def derivedictionaryentrymetadata(headwordtable, cursor):
builder/wordcounting/wordcountsbyheadword.py:def derivechronologicalmetadata(metadata, lemmataobjectlist, authordict=None):
builder/wordcounting/wordcountsbyheadword.py:def derivegenremetadata(metadata, lemmataobjectlist, thetable, knownworkgenres):
builder/wordcounting/wordcountsbyheadword.py:def cohortstats(wordobjects):