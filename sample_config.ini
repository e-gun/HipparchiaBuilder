[db]
DBUSER = hippa_wr
DBHOST = 127.0.0.1
DBPORT = 5432
DBNAME = hipparchiaDB
DBPASS = >>yourpasshere<<

CONNECTIONTYPE = 'if_not_simple_then_it_is_pooled'

[io]
# a sample build time difference between 4 and 6 workers is 37 vs 35min on 4 core/8 thread machine
# the load goes to about 9: too many workers can mean you sit around waiting for cycles
#
# a similar but different issue: load is fine; drive is too slow.
# 10 threads can build in 94m; 11 threads can build in 92m: IO-bound on an NVMe drive at that point.
#
# 11 workers and 16GB of RAM gets touch-and-go during the word counts: serious swapping; near 8G will get used at one point
# if you run out of swap, the wordcounts will be off (and you will not necessarily know that they are off)
#
# sample times:
#   [a] build all corpora with 5 workers on a 4 core/8 thread 3.5Ghz machine with 16G RAM and an SSD running macOS 10.13.4:
#       "Build took 48.15 minutes"
#   [b] build dictionaries
#       "Build took 3.26 minutes"
#   [c] build grammar tables
#       "Build took 6.45 minutes"
#   [d] wordcounts
#       "Build took 54.3 minutes"
#   [e] all of everything
#       "Build took 120.92 minutes"

# autoconfigworkercount will set the workers to: ( cpu_count/ 2 ) + 1
# if this is not 'y', then the value for 'workers' will be used

autoconfigworkercount = 'y'
workers = 3

# directories where we will find all of the files we need

builderdir = ../HipparchiaBuilder/
serverdir = ../HipparchiaServer/

datadir = ../HipparchiaData/
outputdir = ../HipparchiaData/intermediate_output/
outputfile = ../HipparchiaData/intermediate_output/dbready_wkg.txt

# places where the CD-ROMs might mount
# but you will have trouble building everything at once unless some of these are virtual disks

# phi = /Volumes/PHI0005
# tlg = /Volumes/TLG_E
# ddp = /Volumes/PHI7
# ins = /Volumes/PHI7
# chr = /Volumes/PHI7

# places where you can store the CD-ROM data for a big all-in-one-go build

phi= ../HipparchiaData/latin/
tlg = ../HipparchiaData/greek/
ddp = ../HipparchiaData/phi7/
ins = ../HipparchiaData/phi7/
chr = ../HipparchiaData/phi7/

sfx = .TXT
idt = .IDT
debugoutfile = _debug.txt

[lexica]
lexicadir = ../HipparchiaData/lexica/
greeklexicon = greek-lexicon_1999.04.0057.xml
latinlexicon = latin-lexicon_1999.04.0059.xml
gklemm = greek-lemmata.txt
gkanal = greek-analyses.txt
ltlemm = latin-lemmata.txt
ltanal = latin-analyses.txt


[corporatobuild]
buildlatinauthors = y
buildgreekauthors = y
buildinscriptions = y
buildpapyri = y
buildchristians = y
buildlex = y
buildgram = y
buildwordcounts = y

[buildoptions]
# warnings will tell you about missing characters/codes
# timestamp will put a timestamp on the build itself
# 'lunate = n' will enable final sigma + medial sigma: icky, but I will do my best not to judge you
# simplifybrackets: '❨❩❴❵⟦⟧⟪⟫《》‹›⦅⦆₍₎' will turn into '()[]⟨⟩'
# simplifyquotes: '“”‘’«»‹›“„' will turn into '“”‘’'
# smartsinglequotes: **try** to get quotes and initial elisions right: παντὶ ’κείνων and Ἆρ’ οὖν ὑμῖν ἱκανῶϲ and ‘some quoted text’
# hideknownblemishes: zap things like stray $ (which a debugger will need to have available in order to spot failures of the formatting parser)
# buildlongestfirst: compile the longest items first; this is faster (but slightly more confusing) than compiling in numerical order

warnings = n
timestamp = n
lunate = y
simplifybrackets = y
simplifyquotes = y
smartsinglequotes = y
hideknownblemishes = y
buildlongestfirst = y